:imagesdir: ./images-assembly
:toc: macro

= ROS ROV REV 2 Fabrication

== License

The materials for this class are licensed under the Apache license. See the file LICENSE for details.

Copyright 2015, 2016 F Douthit

Copyright 2016 M. Walther (mw46d)

Copyright 2015 D.P.Nielsen (Microsat)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

toc::[]

== Overview

This text describes the materials, tools and assembly of revision 2 of our robot.

== Materials and Tools

List of materials to make the robot from and the tools required to make it

=== Materials

==== Base Options
* Platform Material
** 9"x9”x1/4" King StarBoard® HDPE Marine Building Material 
from TAP Plastics or a similar provider or
** 9"x9”x1/8" Acrylic or
** 9"x9”x1/8" model plywood (3mm)

* We have a number of excellent base design options:
** https://github.com/ProgrammingRobotsStudyGroup/prsg-misc/blob/master/designs/20cm_chassis/20cm_base.svg[20cm SVG base] or

** https://github.com/ProgrammingRobotsStudyGroup/Designs-And-Notes/tree/master/designs/9in_3Rsquared[3RSquared] or

** https://github.com/ProgrammingRobotsStudyGroup/Designs-And-Notes/tree/master/designs/9in_alt1[9in alt1]


==== Common Components
Some of these links point to supplies which far exceed your needs. You may be able to find better prices or a more appropriate quantity from other vendors.

* Sand paper: 80 grit and 120 grit.
* 8 4-40 ½” pan head screws each with nut and lock washer.
* 4 4-40 ⅜” pan head screws.
* link:http://www.element14.com/community/community/raspberry-pi/raspberrypi2[Raspberry Pi 2]
* link:https://www.pololu.com/product/953[Pololu Ball Caster with 1/2″ Metal Ball]
* link:https://www.pololu.com/product/1081[Pololu Universal Aluminum Mounting Hub for 4mm Shaft, #4-40 Holes (2-Pack)]
* link:https://www.pololu.com/product/1428[Pololu Wheel 70×8mm Pair - Blue] - there are other colors
* link:https://www.pololu.com/product/2285[47:1 Metal Gearmotor 25Dx52L mm LP 6V with 48 CPR Encoder]
* link:https://www.pololu.com/product/2676[Pololu 25D mm Metal Gearmotor Bracket Pair]
* link:https://www.pololu.com/product/3117[A-Star 32U4 Robot Controller LV with Raspberry Pi Bridge]
* Tenergy Li-Ion 18650 7.4V 2200mAh Rechargeable Battery module with PCB
* Tenergy TLP4000 Li-Ion/Li-Po Battery Charger
* Raspberry Pi 2 Case
* 32GB SDCard of Raspberry Pi 2 image.
* ½“ or ¾” Velcro tape.
* 3M Command strips
* http://www.amazon.com/gp/product/B00LFDSM6K[1 set of 2.1x5.5mm Female and Male DC Power Adapter Connector]
* http://www.amazon.com/gp/product/B00B4ZRPEY[22 gauge wire]
* http://www.amazon.com/gp/product/B00M5WLZDW[Flat ribbon cable]
* Pin headers: You can use either male of female pin headers, depending upon your preference. Myself I prefer female as they are less likely to bend or short. Male headers have the advantage of a lower profile.
** http://www.amazon.com/gp/product/B00TGOJE1W[Female pin headers]
** Male pin headers
* IR Sensors

=== Optional

* Pi Camera
* link:https://www.adafruit.com/products/2223[GPIO Stacking Header for Pi A+/B+/Pi 2 - Extra-long 2x20 Pins]
* http://www.amazon.com/gp/product/B009ZIILLI[USB Bluetooth BLE Adapter]
* link:https://www.digikey.com/product-detail/en/SN74LS86AN/296-1669-5-ND/277315[2 XOR gates] to combine the motor encoder pins to use only one interrupt per motor
* link:https://www.adafruit.com/products/2310[Pi Hat perma board] iff you want an additional layer for extra electronics
* DS3231 based Real Time Clock for the Pi

=== Tools
Use caution when operating any tool. Always follow the manufacturers recommendations. Get trained and be safe!
[%hardbreaks]
* 40 Watt Full Spectrum laser (optional)
* Bandsaw or jigsaw
* Drill press
** 7/64“ Bit
** 5/64“ Bit
* Phillips screwdriver - take care that the blade fits the pan head screws nicely.
* Protective eyeglasses.
* Soldering station (highly recommended)
* Crimp tool for 0.1" jumper wires (optional)

== Assembly Instructions

=== Fabricating and Assembling The Chassis
Always wear protective eyeglasses when using equipment.
[%hardbreaks]
. You may want to print the design first at full scale in order to verify that everything fits on your material.

 For HDPE, you can use a 40 Watt Full Spectrum laser to etch the design onto the board. Attempting to cut this material results in melting instead of a clean cut. Etch the plan instead. Use the laser cutter on low power. Settings: 100% Speed, 10% power. No excessive melting, little particulates and residue. This material can be flamable so use care.

 Acrylic and wood can be cut on a laser cutter. Use care when attempting this as the acrylic can melt badly leaving messy edges. Acrylic and wood can catch fire, so keep tabs on the laser cutter.

 Another option is to print the design to paper and cut the outline with a mat knife or exacto knife to trace the pattern onto the material.

. If you only etched or scored the design into the base material, use a jigsaw or bandsaw to complete the task. The suggested materials should be easy to cut and shouldn’t take long. Sand the edges for a more finished appearance.

. Drill the motor mount holes using the 7/64“ Bit. These holes go all the way through board.

. Fasten the motor mounts.

. Drill the caster mount holes using the 5/64“ Bit. These holes go all the way through board.

. Fasten the casters.

. Put the Raspberry Pi 2 into its case. (I actually just used sturdy cardboard as an layer under the Pi)

. Mount the Pi case and contents using velcro. Secure to base with Velcro.

. Apply velcro to the battery. Add male connector to battery. Secure battery to base with Velcro.


=== Wiring the electronics
You may find it helpful to refer to this document throughout the electronics build: link:https://github.com/ProgrammingRobotsStudyGroup/Designs-And-Notes/blob/master/Data%20Sheets/Pololu/a-star-32u4-robot-controller-lv-with-raspberry-pi-bridge-pinout-power.pdf[A-Star pinout]. (Image curtesy of Pololu.com)

image::a_star_bridge_pinout_dia.jpg[A-Star Pin Out Diagram]



==== Add Pin headers

By far the most tedious and time consuming effort of the build, but worth it as it makes connecting the motors and sensors so much easier. You can use either male of female pin headers, depending upon your preference. Myself I prefer female as they are less likely to bend or short. Male headers have the advantage of a lower profile.

. At minimum you will want to add headers to:

 * The 32u4 GPIO, Vcc and Ground pins. 84 pins.
 * The power block. 6 pins.
 * The Raspberry Pi 2 GPIO pins. 26 pins.
 * The LS1 level shifter pins. 4 pins.

 That's 120 pins.

. Since you're at it, you might want to complete the pin head wiring:
 * The RPI power block: RPI5V, RPI3V3, AVR3V3 and RPISHDN. 6 pins.
 * The LS2 and LS3 level shifter pins. 8 pins.
 * The MISO / PDO, SCK, [overline]#RESET#, 5V, PB2, GND block. 6 pins.
 * The REGSHDN and STAT pins. 2 pins.
 * The Power control and shutodwn and unused pins. 3 pins. In this case I elected to add the unused pin for stability, but you can safely ignore it.

 Another 24 or 25 pins for a grand total of 144 or 145 pins

==== Wiring the Motor

. Connect the battery to the 2.1x5.5 mm male connector. If you use a connector with tension screws to secure the battery wires secure those. Note that the center conductor should be positive.

. Connect your motor to A-Star using the ribbon cable. Match the colors if you can (black to black and red to red). Remember, one of the motors should have the red & black wires reversed as it is on the opposite side. Connect the encoder power and ground. Connect encoder A and B. See table 1 for wiring harness details. This is the mapping I employed:
[%hardbreaks]
. Add the motor controller
  * Motor 1
  ** M1Pwr Red -> Motor 1 output
  ** M1Pwr Black -> The other Motor 1 output
  ** M1A -> A-Star pin 7
  ** M1B -> A-Star pin 11
  ** M1 Encoder Ground -> A-Star pin 7's GND
  ** M1 Encoder Vcc -> A-Star pin 7's Vcc
  * Motor 2 - note that M2Pwr red/black should be the reverse of M1
  ** M2Pwr Red -> Motor 2 output
  ** M2Pwr Black -> The other Motor 2 output
  ** M2A -> A-Star pin 15
  ** M2B -> A-Star pin 16
  ** M2 Encoder Ground -> A-Star pin 16's GND
  ** M2 Encoder Vcc -> A-Star pin 16's Vcc

.Motor Wiring Harness
[width="100%",options="header,footer"]
|====================
| **Color** |  **Function**
| [red]*Red* |  motor power (connects to one motor terminal)
| *Black* |  motor power (connects to one motor terminal)
| [green]*Green* |  encoder GND
| [blue]*Blue* |  encoder Vcc (3.5 – 20 V)
| [yellow black-background]*Yellow* |  encoder A output
| [white black-background]*White* |  encoder B output
|====================

=== Powering the A-Star 32u4 bus
image::board_power.jpg[A-Star Bus Power]
. You must provide voltage to the 32u4 optional power bus as it is not powered by default.

    a.  Cut and install a short jumper wire to connect [underline]#**south VREG**# to the [underline]#**south side power strip**# of the 32u4 bus. It makes sense to use the PE2 and the nearest of 2 VREG connections.

    b.  Cut and install a jumper wire between the power strip connection of [underline]#**NOT RST**# to power strip of 32u4’s [underline]#**RX pin 0**#.
    c.  Cut and install a jumper wire to connect the [underline]#**north VREG**# to the
    [underline]#**north side power strip**# of the 32u4 bus. It makes
    sense to use the PE2 and the nearest of 2 VREG connections.

=== Finishing Steps
. IR. This step is required for use of the IR sensors.
   * IR #1 --> A-Star A0
   * IR #2 --> A-Star A2
   * IR #3 --> A-Star A3
   * IR #4 --> A-Star A4
   * IR #5 --> A-Star A5
   * IR #6 (on the little robot) --> A-Star A6
   * Ground?

. Attach the A-Star 32u4 to the Raspberry Pi 2.
  * If you have the stacking header, you'll want to attach that to the Pi first. This should leave space between the 2 boards for connecting the Pi Camera.
  * Attach the camera
  * Seat the A-Star on the Raspberry Pi 2. Be sure to align to the proper pins.


== Making it go: A-Star 32U4 software build

=== Getting your development environment working
. Pololu has marvelous documentation. Follow https://www.pololu.com/docs/0J66/4[Getting Started] in Pololu’s documentation in order to install and test your board. 

  * Windows Drivers vs UDEV?
  ** If you are using Windows, start with https://www.pololu.com/docs/0J66/4.1[4.1 installing Windows drivers]. Skip 4.2.
  ** If you are using Linux:
  *** skip 4.1 
  *** Read https://github.com/pololu/a-star[== udev rules ==] section of Pololu's A-Star repository to install your https://github.com/pololu/a-star/blob/master/udev-rules/a-star.rules[udev rules].
  *** Make sure, your user is in the _dialout_ group! If you have to add the user to that group, remember to log out & back in so it will take effect.
  
  * Install the Arduino IDE and associated code as specified in https://www.pololu.com/docs/0J66/4.2[4.2]. Pololu also provides more generic documentation for their family of boards  https://github.com/pololu/a-star[in A-Star's github repository], covering some of the same topics, but not the specifically to the board we use.

  * Try some of the examples from Files->Examples->AStar32U4. BuzzerBasics will validate that you can connect to the A-Star. Motors runs a simple motor test.

=== Communication between A-Star and Raspberry Pi 2
There are a number of ways to connect the Pi and the A-Star. The options are *USB, Serial port* and *I2C*. Each option offers advantages and disadvantages.

==== RPi->A-Star USB
* Probably the simplest method since just a USB cable is required.
* One drawback is that you need a USB cable which flops about.
* http://www.amazon.com/gp/product/B00WMF7JUA[Amazon has very short USB cables]

===== Wiring
* USB cable between A-Star and RPi.

==== RPi->A-Star https://en.wikipedia.org/wiki/I%C2%B2C[I2C]
* I2C is a common means of connecting sensors and controllers.
* There is no special wiring needed. The a* is already connected/level shifted to the Pi's I2C pins.
* Data rate is limited to ~30KBaud. At least that's working pretty well.
* I currently only have a ROS-Arduino-Bridge based setup working with I2C.

*Resources*

* http://i2c.info/
* https://en.wikipedia.org/wiki/I%C2%B2C[https://en.wikipedia.org/wiki/I²C]
* https://github.com/mw46d/ros_arduino_bridge - Not all of the original code is working over I2C yet!!

==== Serial Port RPi->A-Star
image::serial_comm.jpg[Serial comm option]
* Low profile.
* You have to make sure, the Pi does not use this serial port as console! 

===== Wiring
 * RPi GPIO pin 14 (TXD0) -> A-Star pin 0 (RX)
 * A-Star pin 1 (TX) -> 5V of 5V to 3V converter
 * 3V of 5V to 3V converter -> RPi GPIO pin 15 (RXD0)

===== Software
 * Ubuntu
 ** Ubuntu uses tty1 (on the frame buffer) as console by default. But you can check the files mentioned below to make sure.
 * Raspian
 ** Check _/boot/cmdline.txt_ that _console=_ does NOT point to _ttyAMA0_. It's not a problem on my Wheezy based Raspian.
 ** Check _/etc/inittab_ that there is no _*getty_ started on _ttyAMA0_.  It's commented on my Wheezy based Raspian.
 
=== Name your RPi
 * Set your machine name to something unique.
 * Type the command
 
 sudo pico /etc/hostname

 * Change the name to something you like. Make it personal and unique.

=== Creating our robotics software MJ ROS Serial approach
. Install https://github.com/GreyGnome/EnableInterrupt/[Enable Interrupt code].
 * Download the latest release of https://github.com/GreyGnome/EnableInterrupt/releases[Enable Interrupt].
 * Unzip the release into your *sketchbook/libraries* folder, where sketchbook is the root of your Arduino sketches. You can find the directory by selecting file->preferences in the Arduino IDE.  https://github.com/GreyGnome/EnableInterrupt/[Click here] to learn more about the library.

. Simple https://github.com/merose/SimplePID[PID Libary]. Click the link to learn about the library.

 * Get the release software
 ** Download the https://github.com/merose/SimplePID/releases[latest release of the SimplePID library].
 ** Unzip the release into your *sketchbook/libraries* folder, where sketchbook is the root of your Arduino sketches. You can find the directory by selecting file->preferences in the Arduino IDE. 

 * OR for latest check in...
 ** cd  *sketchbook/libraries*
 ** git clone https://github.com/merose/SimplePID.git
[%hardbreaks]
[NOTE]
 This library includes an example for testing the PID constants which can be used as an alternative to the A-Star sample. It uses pin numbers for the DFRobot Romeo, however, so those may need changing. Open via File -> Examples -> SimplePID -> RomeoPIDTest.

. Install rosserial_arduino
[NOTE]
You have a couple of options.

 * Get pre-built code
 ** Clone this repository

 git clone https://github.com/microsat/3r2_robot.git
 
 ** copy /3r2_robot/robot_3r2_firmware/ros_lib/ to <arduinosketch>/library
 ** ros.h mod:

 //  typedef NodeHandle_<ArduinoHardware> NodeHandle;
  typedef NodeHandle_<ArduinoHardware, 10, 10, 256, 256> NodeHandle;

 
 * Build the library yourself
 ** See http://wiki.ros.org/rosserial_arduino/

. Build your Arduino Sketch.

 cd <arduinosketchdir>
 git clone https://github.com/merose/ROSRobotControl.git
 
-or-

 cd <arduinosketchdir>
 git clone https://github.com/koning/ROSAstarNode.git

 * Start the Arduino IDE.
 * Open the code: file->Sketchbook->ROSAstartNode or ROSRobotControl
 * Make sure you have the A-Star board selected: Tools->Board->Pololu A-Star 32u4.
 * Test compile the code using the check mark at the top of the screen.
 * If you have no errors, compile and deploy to the A-Star.
 
=== Pi Code
 . Ensure that your .bashrc contains
 
 source ~/catkin_ws/devel/setup.bash

 . Add rosserial_python and rosserial_msgs
 
  cd ~/Development
  git clone -b indigo https://github.com/ros-drivers/rosserial
  cp -r ~/Development/rosserial/rosserial_python ~/catkin_ws/src/rosserial_python
  cp -r ~/Development/rosserial/rosserial_msgs ~/catkin_ws/src/rosserial_msgs
  
 . Retrieve the code custom code
 
 cd ~/catkin_ws/src/
 git clone https://github.com/merose/differential-drive
 git clone https://github.com/merose/romeo_launch
 
 . Build the code
 
 cd ~/catkin_ws
 catkin_make
 
 . Determine Which tty
 
 ls /dev/tty*
 
 * Make changes to this line in romeo-common.xml if the TTY isn't ttyACM0.
 
 <arg name="tty" default="$(optenv ARDUINO_TTY /dev/ttyACM0)
 
 . Start the Code
 
 roslaunch romeo_launch romeo-standalone.launch

=== Android Control Software
* Android control software can connect to ros master and publish twist messages on the node *cmd_vel*.
* This code is built with ROS Java and ROS Android.
* You can get a copy from https://github.com/ProgrammingRobotsStudyGroup/AndroidControl[this repository].
* Installation is typical of and side loaded Android application. As always, no warranty!
 
=== Shutdown Switch
This is an optional switch which can be used to shutdown the Pi.

==== Hardware
 * You will need a momentary switch. A momentary switch closes the circuit for only as long as it is pressed. 
 * The switch should be easy to reach so you should allow enough wire length to moount it in a convenient place. The Ends of the 2 leads should be finished so that they can plug into your pin headers, male or female.

==== Software
 * Clone this repository
 
 git clone https://github.com/merose/MakeyPiano
 cd MakeyPiano
 cp shutdownSwitch.py <dest dir on pi>
