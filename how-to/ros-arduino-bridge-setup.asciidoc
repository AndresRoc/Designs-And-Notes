= ros_arduino_bridge Setup

:imagesdir: ./images-assembly

`ros_arduino_bridge` is a set of ROS packages designed to make integrating an Arduino-compatible MCU into ROS
easier. It consists of these packages:

* `ros_arduino_bridge` -- The main package, empty.
* `ros_arduino_msgs` -- Definitions of ROS messages used by `ros_arduino_bridge`.
* `ros_arduino_python` -- Python modules and a ROS node that handles the communication.
* `ros_arduino_firmware` -- An Arduino sketch and libraries for the Arduino side.

== Summary of Integration

Here's a summary of what you have to do to use `ros_arduino_bridge` for your PRSG2-style robot:

. Get the code.
. Choose your communication style and wire the UART, if necessary.
. Choose pins and wire the sensors and encoders.
. Edit the Arduino sketch to use your choices and upload to the A-Star.
. Create a launch file incorporating your sensor definitions.
. Launch ROS and test the setup.

Each step is detailed in sections below.

== Getting the Code

Marco has forked
link:https://github.com/hbrobotics/ros_arduino_bridge[the original project] and modified it to add I2C communication.
Mark R. has added some fixes and enhancements which Marco has incorporated. Right now it is best to fork from
Marco's `indigo-devel` branch (the default):

link:https://github.com/mw46d/ros_arduino_bridge[Marco's `ros_arduino_bridge` repository]

Best: Fork the repository into one of your own, then clone that into your Catkin workspace in the `catkin_ws/src` directory. (Note: If you are not running
the Arduino IDE on your robot, then clone the code again onto the computer where you use the Arduino IDE.)

Also works: Clone directly from Marco's repository, or just download a ZIP file of the latest from Marco's repository.

== Communication Styles

`ros_arduino_bridge` can communication between ROS and the Arduino over three different communication paths:

* I2C -- Does not require wiring or cabling, as the A-Star directly connects the Arduino and RPi I2C pins through
level shifters. Theoretically allows higher data rates, but Marco has has problems on the Pi with higher rates
and currently limits the communication to about 30k baud. Marco has also added checksums for messages on this path.
* USB serial -- Does not require any direct wiring, just a USB cable between the Raspberry Pi and Arduino.
* UART serial -- Uses the A-Star UART on pins 0 and 1 to communicate with the Raspberry Pi UART. Requires headers
to be soldered in on one level converter on the A-Star, for the Arduino-to-RPi direction, since the RPi UART uses
3V levels.

Either the I2C or UART serial methods allow the A-Star USB to be used for debug communication, making them slightly
preferable. Using I2C requires no cabling but uses up the A-Star I2C pins. If you want to talk to I2C devices from
the A-Star, you may want to keep these pins free. All three methods work fine -- the choice is really a personal
preference.

=== Wiring for the UART

If you use USB serial or I2C there is no additional wiring required. The I2C pins are already tied together between the RPi and the A-Star through level shifters.

If you want to use the UART, you need to solder in headers for one of the A-Star level shifters, and wire things this way:

* RPi GPIO 14 (Tx) -> A-Star pin 0 (Rx)
* RPi GPIO 15 (Rx) -> Level shifter low-side
* Level shifter high-side -> A-Star pin 1 (Tx)

image:serial_comm.jpg[Photo showing UART wiring]

== IR and Encoder Pins

Marco and Mark have made different choices of pin assignments on their robots. You can choose one of these, or
decide to come up with your own.

.A-Star Pin Assignments
[options="header"]
|=====
| Pin | Marco's robot | Mark's robot | Other A-Star use
| A0 | IR sensor 1 o'clk | IR sensor (L) |
| A1 | IR sensor 2 o'clk (no jumper) | A-Star battery voltage | Analog input tied to battery voltage if jumper in place
| A2 | IR sensor 10 o'clk | IR sensor (LF) |
| A3 | IR sensor 11 o'clk | IR sensor (F) |
| A4 | IR sensor 4 o'clk | IR sensor (RF) |
| A5 | IR sensor 7 o'clk | IR sensor (R ) |
| 0 | unused | RPi communication | Hardware interrupt, UART Rx
| 1 | unused | RPi communication | Hardware interrupt, UART Tx
| 2 | RPi communication | unused | Hardware interrupt, I2C SDA
| 3 | RPi communication | unused | Hardware interrupt, I2C SCL
| 4/A6 | IR sensor 5 o'clk | unused |
| 5 | Right encoder B | unused |
| 6/A7 | IR sensor 8 o'clk | unused |
| 7 | Right encoder XOR | Left encoder A | Hardware interrupt
| 8/A8 | Left encoder XOR | unused | Pin-change interrupt
| 11 | Left encoder B | Left encoder B | Pin-change interrupt
| 15 | unused | Right encoder A | Pin-change interrupt, SPI SCK
| 16 | unused | Right encoder B | Pin-change interrupt, SPI MOSI
|=====

Marco feeds both encoder inputs (A and B) through an XOR gate, as well as reading B separately. This only requires one
pin to have an interrupt. He has used 5, 7, 8, and 11 to keep the encoder inputs nearby on the same rail. However, pin
8 is also tied to analog A8, so one analog pin is used. Pin 7 supports hardware interrupts, while pin 8 supports pin-change
interrupts.

Mark wanted to keep all analog inputs free, in case more analog sensors were added, so he moved the right encoder inputs
to the SPI pins. This means that you can't use SPI if you use his arrangement, but analog A8 is still available. Again,
pin 7 is a hardware interrupt, while 11, 15, and 16 support pin-change interrupts. To reduce the frequency of interrupt
processing, if you use Mark's arrangement only the A encoder inputs are tied to interrupts, and the tick counter is
incremented or decremented by 2 at each interrupt. No XOR is needed, but the effective resolution of the encoders is halved (but still sufficient).

== Customizing the Arduino Sketch

There are different customizations needed depending on whether you Marco's pin assignments and I2C or Mark's pin assignments and UART serial.

=== Marco's Approach

If you are using I2C communication and Marco's pin assignments, find the line that reads `#define SERIAL_STREAM Serial` and insert a new line above it that says `#define USE_I2C`. The result should look like this:

   #define USE_I2C
   #define SERIAL_STREAM Serial1
   #define DEBUG_SERIAL_STREAM Serial

=== Mark's Approach

If you are using the UART for serial communication and Mark's pin assignments, you must edit two lines:

. Change the line that reads `#define SERIAL_STREAM Serial` to read `#define SERIAL_STREAM Serial1` (the Arduino UART object).
. Uncomment the line that reads `//#define USE_ENABLE_INTERRUPT` so that it says `#define USE_ENABLE_INTERRUPT`.

=== A Custom Approach

The pins used by the encoders are defined in the file `diff_controller.h`. Modify the pin assignments to fit your robot. You will also need to use the EnableInterrupt library, if you are using pins that don't support hardware interrupts. If so, uncomment the line that reads `//#define USE_ENABLE_INTERRUPT` so that it says `#define USE_ENABLE_INTERRUPT`. On the 32U4 (Leonardo-compatible), pins 0, 1, 2, 3, and 7 are hardware interrupts. If you use 0 or 1 you cannot use the UART. If you use 2 or 3 you cannot use I2C.

If you are using I2C, add a line `#define USE_I2C` just before the line that says `#define SERIAL_STREAM Serial`.

If you are using the UART for serial communication, change the line that reads `#define SERIAL_STREAM Serial` to read `#define SERIAL_STREAM Serial1` (the Arduino UART object).

=== Uploading the Sketch and Testing

. Power up your robot so that the Raspberry Pi gets sufficient power to boot Linux. (I don't believe it's good to
run the Raspberry Pi entirely on USB power from the host computer, since the power output is probably limited to 1A.)
. Connect your robot to the computer running the Arduino IDE through a USB cable.
. In the Arduino IDE, choose a _Leonardo_ board under Tools > Board, and select the proper port under Tools > Port.
. If you are using the UART, temporarily change the `SERIAL_STREAM` definition to `Serial` (the USB serial port).
. Upload the sketch to the A-Star.

You can test the sketch as follows:

. Open a serial monitor using Tools > Serial Monitor.
. Set the baud rate to 115200, and set the line ending to _Carriage return_.
. In the text box at the top, type `a 0` (with a space between) and press _Send_. The value of the analog pin A0 will be displayed. If you have an IR sensor connected, you should be able to move your hand closer or farther away and see the difference in analog value by using the `a 0` command repeatedly.

Other things you can test, by typing these commands and pressing _Send_:

`a 106` -- Prints the value of the fake analog pin number designating the battery voltage, in millivolts. (This will be the VIN voltage if
you are plugged into a power supply rather than the battery.) Note that this only works if you have the jumper in
place that ties battery voltage to pin A1. (In Marco's pin assignments, the jumper is removed, and an IR sensor is
attached to A1 instead.) Note that you can also read pin A1 via `a 1`, but this returns the raw analog input value. Reading through the pseudo-pin 106 returns the value converted to millivolts (at the cost of about 1ms = 8 analog reads).

`d 100` -- Prints 0 or 1 depending on whether the A-Star button A is pressed. (`d 101` gives button B. Unfortunately, reading button C interferes with PWM on motor 1 -- not sure why.)

`u 100:0:0:100` -- Sets the PID parameters Kp, Ki, Kd, and Ko. (The first three are divided by Ko, in this PID setup.) These values work fine for testing.

`m 50 70` -- Sets the left and right motor speeds to 50 and 70 encoder ticks per PID cycle, respectively. (Default cycle is 30Hz.) Max motor speed is about 120 counts per cycle, I think. (Once you set things up on ROS, we'll deal with meters per second instead of counts.) Note that the motors will only run for 2 seconds after you send this command. This value is defined in the sketch as `#define AUTO_STOP_INTERVAL 2000` (milliseconds). If you want the motors to run continuously for testing, increase this value. `m 0 0` turns off the motors.

If you are using the UART for serial communication, change the line back to `#define SERIAL_STREAM Serial1` and upload the sketch again so that the A-Star is ready for communication with ROS.

== ROS Launch File

On the ROS side you need to create a launch file to start the Python node that will communicate with the Arduino sketch.
You can either embed into that launch file the ROS parameters needed to set up your sensors and PID parameters, or you
can place those parameters into a separate YAML file. In the example below I take the first approach. Here's the launch
file, which we'll look at in detail below.

```


<launch>
    <node name="arduino" pkg="ros_arduino_python" type="arduino_node.py" output="screen">
        <rosparam>
# For a direct USB cable connection, the port name is typically
# /dev/ttyACM# where is # is a number such as 0, 1, 2, etc
# For a wireless connection like XBee, the port is typically
# /dev/ttyUSB# where # is a number such as 0, 1, 2, etc.

port: /dev/ttyAMA0
baud: 115200
timeout: 0.5

rate: 60
sensorstate_rate: 10

use_base_controller: True
base_controller_rate: 30

# For a robot that uses base_footprint, change base_frame to base_footprint
base_frame: base_link

# === Robot drivetrain parameters
wheel_diameter: 0.070
wheel_track: 0.203
encoder_resolution: 48 # from Pololu for 130rpm motors
gear_reduction: 46.8512
motors_reversed: False

# === PID parameters
Kp: 30
Kd: 20
Ki: 0
Ko: 20
accel_limit: 1.0

# === Sensor definitions.  Examples only - edit for your robot.
#     Sensor type can be one of the follow (case sensitive!):
# * Ping
# * GP2D12
# * Analog
# * Digital
# * PololuMotorCurrent
# * PhidgetsVoltage
# * PhidgetsCurrent (20 Amp, DC)

sensors: {
  ir_1:                  {pin: 0, type: GP2Y0A60, rate: 10},
  ir_2:                  {pin: 2, type: GP2Y0A60, rate: 10},
  ir_3:                  {pin: 3, type: GP2Y0A60, rate: 10},
  ir_4:                  {pin: 4, type: GP2Y0A60, rate: 10},
  ir_5:                  {pin: 5, type: GP2Y0A60, rate: 10},
  button_a:              {pin: 100, type: Digital, rate: 10},
  button_b:              {pin: 101, type: Digital, rate: 10},
# Cannot use button C because reading it interferes with motor 1 PWM.
#  button_c:              {pin: 102, type: Digital, rate: 10},
  battery_voltage:       {pin: 106, type: Analog, rate: 1},
  arduino_led:           {pin: 13, type: Digital, rate: 10, direction: output},
}
        </rosparam>
    </node>
</launch>
```

=== Customizing the Launch File

        <node name="arduino" pkg="ros_arduino_python" type="arduino_node.py" output="screen">

This defines the name of the ROS node that will communicate to the A-Star, and the code to run. The name `arduino` will become part of the topic names that are published, as indicated later.

            <rosparam>...</rosparam>

The `rosparam` element can either contain YAML text defining node parameters or can refer to an external YAML file containing those parameters. For simplicity I've included the YAML in-line, but is easier to reuse the parameters in different launch files if you put them into an external YAML file. There is an example launch file in `ros_arduino_python` that shows the latter approach, `launch/arduino.launch`.

    port: /dev/ttyAMA0
    baud: 115200
    timeout: 0.5

The `port` should be the value `1` if you are using I2C. Otherwise it should be the TTY device used to talk to the Arduino. If you are using USB serial, it should be the same as the port value in the Arduino IDE. If you are using the UART, it should be as shown, `/dev/ttyAMA0`.

The `baud` rate should be 115200 if using serial communication. (There is a matching definition in the Arduino sketch.) If using I2C, the baud rate is hard-coded in the Python code.

I haven't experimented with the `timeout` setting, so you should probably leave it alone.

    rate: 60
    sensorstate_rate: 10

The `rate` is the frequence at which the motors are commanded and the sensors are read. The default is 50Hz. I've used 60Hz because that is the update rate of the IR sensors. `sensorstate_rate` is the rate at which sensor value messages are published.

    use_base_controller: True
    base_controller_rate: 30

`use_base_controller` should be `True` in order to enable the motor controls. (The _base controller_ is a piece of the Arduino sketch.) The `base_controller_rate` is the rate at which the motors are controlled in the Arduino sketch. This is used to determine how fast the change the motor speeds to keep within the maximum acceleration defined below. This should match the definition of `PID_RATE` in the Arduino sketch.

    # For a robot that uses base_footprint, change base_frame to base_footprint
    base_frame: base_link

This is the name of the frame that describes the robot position. Usually this is `base_link`.

    # === Robot drivetrain parameters
    wheel_diameter: 0.070
    wheel_track: 0.203
    encoder_resolution: 48 # from Pololu for 130rpm motors
    gear_reduction: 46.8512
    motors_reversed: False

You will need to change `wheel_track` to the actual wheel separation on your robot. I have found that the best distance to use is usually the distance between the center of the treads on the two tires, rather than the inside or outside distance. You only need to change the other parameters if you are using different wheels or motors. (I'm using 60mm wheels, for example, so I also change `wheel_diameter`.)

    # === PID parameters
    Kp: 30
    Kd: 20
    Ki: 0
    Ko: 20
    accel_limit: 1.0

These are Marco's PID parameters. I've used a smaller Kp/Ko value of 1, and that seems to work well, too, but I'm not using derivative damping. I haven't yet played with `accel_limit` to see how it affects the travel.

    sensors: {
      ir_1:                  {pin: 0, type: GP2Y0A60, rate: 10},
      ir_2:                  {pin: 2, type: GP2Y0A60, rate: 10},
      ir_3:                  {pin: 3, type: GP2Y0A60, rate: 10},
      ir_4:                  {pin: 4, type: GP2Y0A60, rate: 10},
      ir_5:                  {pin: 5, type: GP2Y0A60, rate: 10},
      button_a:              {pin: 100, type: Digital, rate: 10},
      button_b:              {pin: 101, type: Digital, rate: 10},
    # Cannot use button C because reading it interferes with motor 1 PWM.
    #  button_c:              {pin: 102, type: Digital, rate: 10},
      battery_voltage:       {pin: 106, type: Analog, rate: 1},
      arduino_led:           {pin: 13, type: Digital, rate: 10, direction: output},
    }

These are sensor definitions for Mark's robot, which has only 5 IR sensors and has the battery voltage jumper in place. For each sensor you define the type, pin, and rate at which to publish values. Note that I've defined two _pseudo-pins_ 100 and 101, which refer in the Arduino sketch to buttons A and B on the A-Star. These can be used to change robot behavior by listening on those topics. The IR values will be converted to actual distances, in meters, by the Python code for the GP2Y0A60 sensor type.

Each of these sensor names becomes a topic published in ROS. All the topics are private to the node, so the full topic name will look like this:

/_nodename_/sensor/_sensorname_

As an example, the value of the `ir_1` sensor above will be published on the topic `/arduino/sensor/ir_1`. You can map these to other topic names using `<remap>`.

== Testing the ROS Launch

Once you have edited your launch file, you can run ROSCore and the `ros_arduino_python` node like this:

    roslaunch path-to-your-launch-file

To test the setup, in a second terminal window, show the value of the first IR sensor like this:

    rostopic echo /arduino/sensor/ir_1

This should show the distance of an object from the first IR sensor, in meters. Move your hand around and see that the value changes. You can also monitor the battery voltage in mV by echoing the topic `/arduino/sensor/battery_voltage`.

To move the robot 0.1 meters per second straight ahead, you can use this publish command. Press control-C to stop publishing the desired velocity and stop the robot.

    rostopic pub -r 10 /cmd_vel geometry_msgs/Twist '{linear: {x: 0.1, y: 0, z: 0}, angular: {x: 0, y: 0, z: 0}}'

*Details about this message:* This is a more complex `rostopic` command than that above. This says to send, 10 times per second, a `Twist` message to the `/cmd_vel` topic. A `Twist` message consists of 6 scalar values, the three linear velocities along each axis, as well as the three rotational velocities around each axis. Because our robot is non-holonomic, it only looks at two of the six values: the linear `x` velocity (forward/reverse speed) and the angular `z` velocity (turning rate around the vertical axis). The `Twist` message above causes forward movement of 0.1 meters/second with no turning. By contrast, this `Twist` will cause the robot to rotate in place counter-clockwise at 0.9 radians/second: `{linear: {x: 0, y: 0, z: 0}, angular: {x: 0, y: 0, z: 0.9}}`. You can also provide both a forward/backward velocity and a turning rate, of course.
